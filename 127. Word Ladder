class Solution {
public:
    int diff(string a, string b ){
        int cnt=0;
        for(int i=0;i<a.size();i++){
            if(a[i]!=b[i])cnt++;
        }
        return cnt;
    }
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        
         unordered_map<string,vector<string>> mp;
         for(int i=0;i<wordList.size();i++){
            for (int j=i+1;j<wordList.size();j++){
                if(diff(wordList[i],wordList[j]) ==1){
                    mp[wordList[i]].push_back(wordList[j]);
                    mp[wordList[j]].push_back(wordList[i]);
                }

            }
         }
         for(int i=0;i<wordList.size();i++){
            if(diff(beginWord,wordList[i])==1){
                 mp[wordList[i]].push_back(beginWord);
                    mp[beginWord].push_back(wordList[i]);

            }
         }

         queue<pair<string,int>> q;
         q.push({beginWord,1});
         set<string> vis;
         vis.insert(beginWord);
         while(!q.empty()){
            auto x=q.front();
            q.pop();
            string st=x.first;
            int lv=x.second;
            for(auto neigh:mp[st]){
                if(vis.find(neigh)==vis.end()){
                q.push({neigh,lv+1});
                vis.insert(neigh);}
                if(neigh==endWord)return lv+1;

            }
         }

         return 0;
    }
};
