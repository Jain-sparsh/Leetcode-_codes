class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int> ans;
        int n=words.size();
        int m=words[0].size();
        if(s.size() < n*m){
            return ans;
        }
        for(int i=0;i<= s.size()- n*m ;i++){
            unordered_map<string,int> mp;
            for(int j=0;j<n;j++){
                mp[words[j]]++;
            }
            
            int l=0;
            for(;l<n;l++){
                string str=s.substr(i+l*m,m);
                if(mp.count(str)==0){
                    break;
                }
                else{
                    if(mp[str]!=0){
                        mp[str]--;
                    }
                    else{
                        break;
                    }
                }
            }
            if(l==n){
                ans.push_back(i);
            }
        }
     return ans;   
    }
};


//sliding window

class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int> ans;
        unordered_map<string,int> mp1;
        int n=words.size();
        int m=words[0].size();
        int tl=n*m;
        if(s.size() < n*m){
            return ans;
        }
        for(auto word:words){
           
           mp1[word]++;
        }
        for(int i=0;i<m;i++){
            unordered_map<string,int> mp2;
            int left=i;
            for(int j=i;j<=s.size()-m;j+=m){
                string temp=s.substr(j,m);
                if(mp1.find(temp)!=mp1.end()){
                    mp2[temp]++;
                    while(mp2[temp]>mp1[temp]){
                        mp2[s.substr(left,m)]--;
                        left+=m;
                    }
                    if(j-left + m ==tl){
                        ans.push_back(left);
                        mp2[s.substr(left,m)]--;
                        left+=m;
                
                    }

                }
                else{
                    mp2.clear();
                    left=j+m;
                }
            }
            
        }
     return ans;   
    }
};
