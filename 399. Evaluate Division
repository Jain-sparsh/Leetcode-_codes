class Solution {
public:
    double dfs(string a , string b , unordered_map<string , unordered_map<string , double>> & graph,  unordered_set<string> &vis ){
        if(graph[a].find(b)!=graph[a].end()){
            return graph[a][b];
        }
        for(auto node:graph[a]){
            if(vis.find(node.first)==vis.end()){
                vis.insert(node.first);
                double val=dfs(node.first , b , graph , vis);
                if(val!=0.0){
                    graph[a][b]=node.second*val;
                    return graph[a][b];
                }
            }
        }
        return 0;



    }
    
    vector<double> calcEquation(vector<vector<string>>& eq, vector<double>& values, vector<vector<string>>& queries) {
        vector<double> ans;
        unordered_map<string , unordered_map<string , double>> graph;
        for(int i=0;i<eq.size();i++){
            graph[eq[i][0]][eq[i][1]]=values[i];
            graph[eq[i][1]][eq[i][0]]=double(1)/values[i];
            
            
        }

        for(int i=0;i<queries.size();i++){
            unordered_set<string> vis;
            double val=dfs(queries[i][0],queries[i][1],graph,vis);
            if(!val){
                ans.push_back(-1.0);
            }
            else{
                ans.push_back(val);
            }

        }




        return ans;

        
    }
};
