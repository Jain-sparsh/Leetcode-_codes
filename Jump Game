class Solution {
public:
    bool solve(vector<int> & num){
        int reachable=0;
        for(int i=0;i<num.size()-1;i++){
            if(i>reachable) break;
            if((i+num[i])>reachable && num[i]!=0)reachable=(i+num[i]);

        }
        if(reachable>=num.size()-1)return 1;
        else return 0;
    }
    bool canJump(vector<int>& num) {
        return solve(num);
        
    }
};


// 2nd approach 

class Solution {
public:
 int solve(vector<int> & num){

     int f=0;
     int c=0;
     int cnt=0;
     for(int i=0;i<num.size()-1;i++){
         f=max(f,i+num[i]);
         if(i==c){
             c=f;
             cnt++;
         }
     }

     return cnt;
 }
    int jump(vector<int>& num) {
        return solve(num);
        
    }
};

