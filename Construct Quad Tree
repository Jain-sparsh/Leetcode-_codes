/*
// Definition for a QuadTree node.
class Node {
public:
    bool val;
    bool isLeaf;
    Node* topLeft;
    Node* topRight;
    Node* bottomLeft;
    Node* bottomRight;
    
    Node() {
        val = false;
        isLeaf = false;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/

class Solution {
public:
    bool sameval(vector<vector<int>> & grid , int x, int y , int len){
        for(int i=x;i<x+len ;i++){
            for (int j=y;j<y+len;j++){
                if(grid[i][j]!=grid[x][y])return false;

            } 
        }
        return true;
    }
    Node * solve(vector<vector<int>> & grid , int x, int y , int len){

        if(sameval(grid,x,y,len)){
            return new Node(grid[x][y],true);
        }

        Node *root = new Node(0,false);
        root->topLeft=solve(grid,x,y,len/2);
        root->topRight=solve(grid,x  ,y + len/2,len/2);
        root->bottomLeft=solve(grid,x + len/2,y,len/2);
        root->bottomRight=solve(grid,x+ len/2,y + len/2,len/2);
        return root;

    }
    Node* construct(vector<vector<int>>& grid) {
        return solve(grid,0,0,grid.size());
        
    }
};
