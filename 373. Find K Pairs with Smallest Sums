class Solution {
public:
    struct CompareFirstIndex {
    bool operator()(const vector<int>& a, const vector<int>& b) const {
        return a[0] > b[0]; 
    }
};
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {

        if (nums1.empty() || nums2.empty() || k <= 0) {
            return {};
        }
       priority_queue<vector<int>, vector<vector<int>>, CompareFirstIndex> pq;
       pq.push({nums1[0]+nums2[0],0,0});
       vector<vector<int>> ans;
       set<pair<int,int>> vis;
       vis.insert({0,0});


       while(!pq.empty() && k>0 ){
        vector<int> x=pq.top();
        pq.pop();
        int i=x[1];
        int j=x[2];
        if(i+1<nums1.size() && vis.find({i+1,j})==vis.end()){
        pq.push({nums1[i+1]+nums2[j], i+1,j});
        vis.insert({i+1,j});

        }
        if(j+1 < nums2.size() && vis.find({i,j+1})==vis.end()){
        pq.push({nums1[i]+nums2[j+1], i,j+1});
         vis.insert({i,j+1});
        }
        ans.push_back({nums1[i],nums2[j]});

        k--;

       }

       return ans;

        
    }
};
