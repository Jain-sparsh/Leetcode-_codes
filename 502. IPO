class Solution {
public:
    struct compare {
        bool operator()(const pair<int,int>& a, const pair<int,int>& b) {
            return a.first > b.first; 
        }
    };
    struct compare2 {
        bool operator()(const pair<int,int>& a, const pair<int,int>& b) {
            return a.second < b.second; 
        }
    };
   int findMaximizedCapital(int k, int w, vector<int>& profits, vector<int>& capital) {
        int n = profits.size();
         priority_queue<pair<int, int>, vector<pair<int, int>>, compare> pqmin;
         priority_queue<pair<int, int>, vector<pair<int, int>>, compare2> pqmax;
        
        
        for (int i = 0; i < n; ++i) {
            pqmin.push({capital[i], profits[i]});
        }
        while (k > 0) {  
            while (!pqmin.empty() && pqmin.top().first <= w) {
                pqmax.push(pqmin.top());
                pqmin.pop();
            }  
            if (pqmax.empty()) {
                break;
            }  
            pair<int, int> current = pqmax.top();
            pqmax.pop();  
            w += current.second;  
            k--;
        }
        return w;
    }
};
