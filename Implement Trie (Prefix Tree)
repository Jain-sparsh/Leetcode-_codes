
class TrieNode {
    public:
    
    TrieNode * child[26];
    bool isterminal;

    TrieNode(){
      
        for(int i=0;i<26;i++){
            child[i]=NULL;
            
        }
        isterminal=false;

    }
};
class Trie {
public:
    TrieNode *root;
    Trie() {
        root=new TrieNode();
        
    }
    void insertutil(TrieNode *root, string word){
         if(word.length()==0){
         root->isterminal=true;
         return;
        }
        TrieNode *childn;
        int x=word[0]-'a';
        if(root->child[x] != NULL)
            childn=root->child[x];
        
        else{
            childn= new TrieNode();
            root->child[x]=childn;
        }
        insertutil(childn,word.substr(1));
    }
    void insert(string word) {
        insertutil(root,word); 


       
       
        
    }
    bool searchutil(TrieNode * root, string word){
        if(word.length()==0)return root->isterminal;

         TrieNode *childn;
        int x=word[0]-'a';
        if(root->child[x]!=NULL){
            childn=root->child[x];
        }
        else{
            return false;
        }
        return searchutil(childn,word.substr(1));


      }
    bool search(string word) {
        return searchutil(root,word);
        
    }

     bool startsutil(TrieNode * root, string word){
        if(word.length()==0)return true;

         TrieNode *childn;
        int x=word[0]-'a';
        if(root->child[x]!=NULL){
            childn=root->child[x];
        }
        else{
            return false;
        }
        return startsutil(childn,word.substr(1));


      }
    
    bool startsWith(string prefix) {
        return startsutil(root,prefix);
        
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
