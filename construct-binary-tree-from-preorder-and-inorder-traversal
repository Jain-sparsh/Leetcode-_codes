/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findpos(vector<int> & inorder, int val, int end){

        for(int i=0;i<end;i++){
            if(inorder[i]==val){
                return i;
            }
        }
        return -1;
    }
    TreeNode * solve(vector<int>& preorder, vector<int>& inorder, int &index, int s, int e, int end ){

        if(s>e  || index>=end){
        return NULL;
        }
         TreeNode * root=new TreeNode(preorder[index++]);
         int p=findpos(inorder,root->val,end);
         root->left=solve(preorder,inorder,index,s,p-1,end);
         root->right=solve(preorder,inorder,index,p+1,e,end);
         return root;

    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int index=0;
        int n=preorder.size();
        TreeNode * ans=solve(preorder,inorder,index,0,n-1,n);
        return ans;
    }
};
