class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {

        unordered_map<string,vector<string>> mp ;
        int wordsize=beginWord.size();
        for(int i=0;i<wordList.size();i++){
            string st=wordList[i];
            for(int j=0;j<wordsize;j++){
            string x=st.substr(0,j)+"*"+st.substr(j+1,wordsize-j-1); 
            mp[x].push_back(st);        
                
          }
        }
        string st=beginWord;
        for(int i=0;i<wordsize;i++){
            string x=st.substr(0,i)+"*"+st.substr(i+1,wordsize-i-1); 
            mp[x].push_back(st);        

        }
        queue<pair<string,int>> q;
        set<string> vis;
        q.push({beginWord,1});
        vis.insert(st);
        while(!q.empty()){
            auto x=q.front();
            q.pop();
            string s=x.first;
            int lv=x.second;
            for(int i=0;i<wordsize;i++){

                string x=s.substr(0,i)+"*"+s.substr(i+1,wordsize-i-1); 
                vector<string> temp=mp[x];
                for(auto tmp:temp){
                    if(vis.find(tmp)==vis.end()){
                        q.push({tmp,lv+1});
                        vis.insert(tmp);
                        if(tmp==endWord)return lv+1;
                    }

                } 

            }
        }
        return 0;
    }
};
