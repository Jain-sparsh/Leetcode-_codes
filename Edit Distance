class Solution {
public:
    int solve(string& word1, string& word2,int i,int j, vector<vector<int>> &dp){
        if(i==word1.length())
             { return word2.length()-j; } 
        if(j==word2.length())
          {return word1.length()-i; } 

        int ans=0;
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        if(word1[i]==word2[j]){
            return solve(word1,word2,i+1,j+1,dp);
        }
        else{

            int in=1 + solve(word1,word2,i,j+1,dp);
            int d=1 + solve(word1,word2,i+1,j,dp);
            int r=1 + solve(word1,word2,i+1,j+1,dp);
            ans = min (in , min(d,r) );
        }
        dp[i][j]=ans;

        return  ans;


    }
    int solvetab(string& a, string& b){
        vector<vector<int> > dp(a.length()+1,vector<int>(b.length()+1,0));

          for(int j=0;j<b.length();j++){
            dp[a.length()][j]=b.length()-j;
        }

        for(int i=0;i<a.length();i++){
            dp[i][b.length()]=a.length()-i;
        }

        for(int i=a.length()-1;i>=0;i--){
            for(int j=b.length()-1;j>=0;j--){

                int ans=0;
         
              if(a[i]==b[j]){
                ans=dp[i+1][j+1];
             }
             else{

                 int in=1 + dp[i][j+1];
                 int d=1 + dp[i+1][j];
                 int r=1 + dp[i+1][j+1];
                 ans = min (in , min(d,r) );
        }
        dp[i][j]=ans;


            }
        }
        return dp[0][0];
    }
    int minDistance(string word1, string word2) {
        vector<vector<int> > dp(word1.length(),vector<int>(word2.length(),-1));
        return solvetab(word1,word2);
        
    }
};
