class LRUCache {
public:
    class Node{
        public:
        int key;
        int val;
        Node * prev;
        Node * next;
        Node(int _key , int _val){
            key=_key;
            val=_val;
        }
    };
    Node * head =new Node(-1,-1);
    Node * tail =new Node(-1,-1);
    int cap=0;
    unordered_map<int , Node*>mp;

    LRUCache(int capacity) {
        cap=capacity ;
        head->next=tail;
        tail->prev=head;
        
    }
    void deletenode(Node * node){
        Node * prevnode=node->prev;
        Node * nextnode=node->next;
        prevnode->next=nextnode;
        nextnode->prev=prevnode;
    }
    void addnode(Node * node){
    Node * firstnode=head->next;
    node->next=firstnode;
    node->prev=head;
    firstnode->prev=node;
    head->next=node;
    
    }
    
    int get(int key) {
        if(mp.find(key)!=mp.end()){
            Node * ansnode=mp[key];
            int ans=ansnode->val;
            mp.erase(key);
            deletenode(ansnode);
            addnode(ansnode);
            mp[key]=head->next;
            return ans;
            
        }

        return -1;
        
    }
    
    void put(int key, int value) {
        if(mp.find(key)!=mp.end()){
            Node * oldnode=mp[key];
            mp.erase(key);
            deletenode(oldnode);

        }
        if(mp.size()==cap){
            mp.erase(tail->prev->key);
            deletenode(tail->prev);

        }
        addnode(new Node(key,value));
        mp[key]=head->next;

        
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
