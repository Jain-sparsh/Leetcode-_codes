class MedianFinder {
public:
priority_queue<int> maxheap;
priority_queue<int,vector<int>,greater<int> > minheap;
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        if(minheap.size()==0 && maxheap.size()==0){
            maxheap.push(num);
        }else{
            if(maxheap.top()<num){
                minheap.push(num);
            }
            else {
                maxheap.push(num);
            }
        }
        int n=maxheap.size();
        int m=minheap.size();
        if(n-m ==2 || n-m ==-2){
            if(n>m){
                int x=maxheap.top();
                maxheap.pop();
                minheap.push(x);
            }
            else{
                int x=minheap.top();
                minheap.pop();
                maxheap.push(x);

            }
        }
    }
    
    double findMedian() {
        int n=maxheap.size();
        int m=minheap.size();

        if((n+m)%2==0){
            return ( (double)(maxheap.top() + minheap.top()) )/2.0;
        }else{
            if(n>m) return (double)maxheap.top();
            else return (double)minheap.top();
        }
        
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */
